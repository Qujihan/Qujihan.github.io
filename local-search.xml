<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习笔记—正则表达式</title>
    <link href="/regular-expression/"/>
    <url>/regular-expression/</url>
    
    <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><a id="more"></a><p>TODO：后向引用</p><h3 id="一、元字符及其实例"><a href="#一、元字符及其实例" class="headerlink" title="一、元字符及其实例"></a>一、元字符及其实例</h3><h4 id="1、元字符以及重复"><a href="#1、元字符以及重复" class="headerlink" title="1、元字符以及重复"></a>1、元字符以及重复</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\w</td><td>word 匹配字母、数字、下划线以及汉字</td></tr><tr><td>\W</td><td>word 匹配<strong>不是</strong>字母、数字、下划线以及汉字的字符</td></tr><tr><td>\s</td><td>space 匹配空白符</td></tr><tr><td>\S</td><td>space 匹配<strong>不是</strong>空白符的字符</td></tr><tr><td>\d</td><td>digit 匹配数字</td></tr><tr><td>\D</td><td>digit 匹配<strong>不是</strong>数字的字符</td></tr><tr><td>\b</td><td>匹配单词的开始或单词的结束</td></tr><tr><td>\B</td><td>匹配<strong>不是</strong>  单词的开始或单词的结束  的位置</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束（\n之前的位置）</td></tr><tr><td>[^x]</td><td>匹配除了x以外的所有字符</td></tr></tbody></table><h4 id="2、转义"><a href="#2、转义" class="headerlink" title="2、转义"></a>2、转义</h4><p>使用\可以转义，使用  <strong>\.</strong>  可以匹配  <strong>.</strong>  </p><h4 id="3、重复"><a href="#3、重复" class="headerlink" title="3、重复"></a>3、重复</h4><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式<strong>零次或多次</strong></td></tr><tr><td>?</td><td>匹配前面的子表达式<strong>零次或一次</strong></td></tr><tr><td>+</td><td>匹配前面的子表达式<strong>一次或多次</strong></td></tr><tr><td>{n}</td><td>匹配前面的子表达式<strong>n次</strong></td></tr><tr><td>{n,}</td><td>匹配前面的子表达式<strong>n次或更多次</strong></td></tr><tr><td>{n,m}</td><td>匹配前面的子表达式<strong>n到m次</strong></td></tr><tr><td>|</td><td>把不同的规则分隔开，从左到右测试每个条件，如果满足某一个分支，就不继续往下匹配</td></tr></tbody></table><h4 id="4、例子"><a href="#4、例子" class="headerlink" title="4、例子"></a>4、例子</h4><ul><li>匹配<code>0_ _(2位) - _ _ _ _ _ _ _ _(8位)</code>与<code>0_ _ _(3位) - _ _ _ _ _ _ _(7位)</code>（匹配电话号码）<ol><li><code>^ 0\d{2,3}-\d{7,8} $</code></li><li><code>0\d{2}-\d{8} | 0\d{3}-\d{7}</code></li></ol></li><li>匹配021-12345678 / (021)12345678 / 021 12345678 / 052-1234567 / 0632 5882967这样不同的电话号码<ol><li><code>^  [(]? 0 \d{2,3} [\s-)] \d{7,8} $</code>（不严谨）</li></ol></li></ul><h4 id="5、说明"><a href="#5、说明" class="headerlink" title="5、说明"></a>5、说明</h4><ul><li>[0-9] == \d</li><li>[a-z0-9A-Z] == \w</li></ul><h3 id="二、正则表达式的分组"><a href="#二、正则表达式的分组" class="headerlink" title="二、正则表达式的分组"></a>二、正则表达式的分组</h3><h4 id="1、分组"><a href="#1、分组" class="headerlink" title="1、分组"></a>1、分组</h4><ul><li>使用（）将表达式做成子集</li><li>方便对match的字符串进行划分</li><li>分组的命名：<code>(?&lt;groupname&gt; exp)</code></li><li>匹配但不捕获：<code>(?:exp)</code></li></ul><h4 id="2、贪婪与懒惰"><a href="#2、贪婪与懒惰" class="headerlink" title="2、贪婪与懒惰"></a>2、贪婪与懒惰</h4><ul><li>贪婪（尽可能的多）<ul><li><code>a.*b</code>：（aabab）—&gt; aabab  （非得找到最后一个匹配的）</li></ul></li><li>懒惰（尽可能的少）<ul><li><code>a.*?b</code>：（aabab）—&gt; aab  （找到第一个匹配的就满足了）</li></ul></li></ul><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*？</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+？</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>？？</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><h3 id="三、其他知识"><a href="#三、其他知识" class="headerlink" title="三、其他知识"></a>三、其他知识</h3><h4 id="1、后向引用"><a href="#1、后向引用" class="headerlink" title="1、后向引用"></a>1、后向引用</h4><h4 id="2、零宽断言"><a href="#2、零宽断言" class="headerlink" title="2、零宽断言"></a>2、零宽断言</h4><p>​    查找一种单词—它里面出现了字母q，但是q后面跟的不是u，如果使用<code>\b\w*q[^u]\w*\b</code>，会发现banq这种单词选不出来，因为q后面必须要有一个位置，banq的q后面没有位置了这时候就需要使用零宽了</p><p>​    换句话说零宽的作用：<strong>只查找，不占位</strong></p><ul><li>零宽度正预测先行断言<ul><li>用法：<code>(?=exp)</code></li><li>示例：<code>\b\w+(?=ing\b)</code>—&gt;I’m <strong>sing</strong>ing while you’re <strong>danc</strong>ing</li></ul></li><li>零宽度正回顾后发断言<ul><li>用法：<code>(?&lt;=exp)</code></li><li>示例：<code>(?&lt;=\bre)\w+\b</code>—&gt;re<strong>ading</strong> a book</li></ul></li><li>零宽度负回顾先行断言<ul><li>用法：<code>(?!exp)</code></li><li>示例：匹配带q且后面不是u的单词：<code>\b\w*q(?!u)\w*\b</code></li><li>示例：匹配三位数字且后面不是数字的：<code>\d{3}(?!\d)</code></li><li>示例：匹配不包含abc的单词：<code>\b((?!abc)\w)\b</code></li></ul></li><li>零宽度负回顾后发断言<ul><li>用法：<code>(?&lt;!exp)</code></li><li>示例：匹配前面不是小写字母的七位数字：<code>(?&lt;![a-z])\d{7}</code></li></ul></li></ul><h4 id="3、平衡组／递归匹配"><a href="#3、平衡组／递归匹配" class="headerlink" title="3、平衡组／递归匹配"></a>3、平衡组／递归匹配</h4><ul><li><code>(?&#39;group&#39;)</code>：把捕获的内容命名为group,并压入堆栈</li><li><code>(?&#39;-group&#39;)</code>：弹出group分组的内容，若栈空则匹配失败</li><li><code>(?(group) yes|no)</code>:如果栈中存在名为group的捕获内容，则匹配yes内容，否则匹配no</li><li><code>(?!)</code>：零宽度负回顾先行断言</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录手册—VSCode的插件与快捷键</title>
    <link href="/vscode/"/>
    <url>/vscode/</url>
    
    <content type="html"><![CDATA[<p>VSCode的自用速查表</p><a id="more"></a><h3 id="一、插件"><a href="#一、插件" class="headerlink" title="一、插件"></a>一、插件</h3><h4 id="通用："><a href="#通用：" class="headerlink" title="通用："></a>通用：</h4><ul><li>Chinese (Simplified) Language Pack for Visual Studio Code：简体中文语言包</li><li>Bracket Pair Colorizer 2：彩虹括号。很好看！</li><li>Code Runner：为多种语言运行程序</li><li>TabOut： 使用Tab键跳出括号</li><li>Visual Studio IntelliCode</li></ul><h4 id="C-："><a href="#C-：" class="headerlink" title="C++："></a>C++：</h4><ul><li>C/C++</li></ul><h4 id="Latex："><a href="#Latex：" class="headerlink" title="Latex："></a>Latex：</h4><ul><li>LaTeX Workshop</li><li>LaTeX language support</li></ul><h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><ul><li>open in browser</li></ul><h4 id="Python："><a href="#Python：" class="headerlink" title="Python："></a>Python：</h4><ul><li>Python</li></ul><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul><li>Language Support for Java(TM) by Red Hatredhat</li><li>Java Dependency Viewer</li><li>Java Extension Pack</li><li>Debugger for Java</li><li>Java Test Runner</li><li>Maven for Java</li></ul><h3 id="二、快捷键"><a href="#二、快捷键" class="headerlink" title="二、快捷键"></a>二、快捷键</h3><h4 id="关于VSCode的快捷键"><a href="#关于VSCode的快捷键" class="headerlink" title="关于VSCode的快捷键"></a>关于VSCode的快捷键</h4><ul><li>打开关闭侧栏：Ctrl+B</li><li>命令面板：Ctrl+P</li></ul><h4 id="关于编码的快捷键"><a href="#关于编码的快捷键" class="headerlink" title="关于编码的快捷键"></a>关于编码的快捷键</h4><ul><li>代码缩进整理：Shift+Alt+F</li><li>代码折叠/展开：Ctrl+Shift+[  /  Ctrl+Shift+]</li><li>上下移动复制：Shift+Alt+↑/↓</li><li>复制行：Ctrl+Shift+D</li><li>删除行：Ctrl+X</li><li>删除单词：Ctrl+Backspace</li><li>在上方/下方添加光标：Ctrl+Alt+↑/↓</li><li>转到工作区的变量或函数：Ctrl+D</li><li>变量或函数重命名：选中按F2</li><li>列（框）的选择：Shift+Alt</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件破解—Photoshop2020</title>
    <link href="/photoshop/"/>
    <url>/photoshop/</url>
    
    <content type="html"><![CDATA[<p>Adobe PhotoShop的破解，理论上18、19、20都适用，但仅在20版本实验过<br>本人支持正版，仅在我本人电脑上试验是否可以破解。破解请自行承担法律责任</p><a id="more"></a><ol><li><p>在开始菜单搜索windows防火墙并打开</p></li><li><p>左侧点击高级设置—&gt;出站规则—&gt;新建规则</p></li><li><p>选择程序，点击下一步</p></li><li><p>分三次，将三个路径添加进去</p><pre><code class="shell">C：\Program Files (x86)\Common Files\Adobe\OOBE\PDApp\P6\adobe_licutil.exeC：\Program Files (x86)\Common Files\Adobe\OOBE\PDApp\P7\adobe_licutil.exeC：\Program Files (x86)\Common Files\Adobe\OOBE\PDApp\core\PDapp.exe</code></pre></li><li><p>阻止连接，点击下一步</p></li><li><p>域、专用、公用，三个选项都选，点击下一步</p></li><li><p>命名自己看懂就好，完成</p></li><li><p>打开Photoshop—&gt;帮助—&gt;退出账户</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记—Git_Github</title>
    <link href="/git-github/"/>
    <url>/git-github/</url>
    
    <content type="html"><![CDATA[<p>一些Git的quick start与入门知识：配置信息，仓库的创建、提交、删除、重命名、查看日志、修改提交描述、给Git命令起别名、分支等</p><a id="more"></a><h3 id="1-初入手该做的事情——配置个人（作者）信息"><a href="#1-初入手该做的事情——配置个人（作者）信息" class="headerlink" title="1.初入手该做的事情——配置个人（作者）信息"></a>1.初入手该做的事情——配置个人（作者）信息</h3><h4 id="更改全局的信息"><a href="#更改全局的信息" class="headerlink" title="更改全局的信息"></a>更改全局的信息</h4><pre><code class="shell">#配置全局的作者邮箱git config --global user.email &quot;qujihan@163.com&quot;#配置全局的作者名字git config --global user.name &quot;Qu&quot;#可以在C:\Users\${username}\.gitconfig 可以查看用户的全局设置</code></pre><h4 id="更改某个仓库的信息"><a href="#更改某个仓库的信息" class="headerlink" title="更改某个仓库的信息"></a>更改某个仓库的信息</h4><pre><code class="shell">#配置项目作者邮箱git config user.email &quot;qujihan@163.com&quot;#配置项目作者姓名git config user.name &quot;Qu&quot;#查看配置信息(信息一般在git目录下的config文件中)code git/config</code></pre><h4 id="创建一个新的仓库"><a href="#创建一个新的仓库" class="headerlink" title="创建一个新的仓库"></a>创建一个新的仓库</h4><pre><code class="shell">#新建git init</code></pre><h4 id="版本库忽略文件的配置"><a href="#版本库忽略文件的配置" class="headerlink" title="版本库忽略文件的配置"></a>版本库忽略文件的配置</h4><pre><code class="shell">#创建一堆文件touch a.txt b.txt c.txt d.txt e.txt f.txt#创建文件夹并且在其中创建文件mkdir test &amp;&amp; touch test/qu.txt#创建忽略文件touch .gitignore</code></pre><p>忽略文件的配置：</p><ol><li><p>*.txt ：忽略所有的txt文件</p></li><li><p>a.txt ：忽略a.txt</p></li><li><p>*.txt  !a.txt ：忽略除了a.txt以外的所有txt</p></li><li><p>/test ：忽略test文件夹里面的内容</p></li></ol><p><strong>当且仅当文件夹里的所有文件都被忽略的时候，使用git status才不显示这个文件</strong></p><h3 id="2-Git使用中——接手新项目"><a href="#2-Git使用中——接手新项目" class="headerlink" title="2.Git使用中——接手新项目"></a>2.Git使用中——接手新项目</h3><h4 id="接手一个旧的仓库"><a href="#接手一个旧的仓库" class="headerlink" title="接手一个旧的仓库"></a>接手一个旧的仓库</h4><pre><code class="shell">#从github等网站克隆一个仓库（后面是克隆的地址）git clone https://github.com/Qujihan/OperatingSystem_Algorithm.git</code></pre><h4 id="从版本库中删除文件"><a href="#从版本库中删除文件" class="headerlink" title="从版本库中删除文件"></a>从版本库中删除文件</h4><pre><code class="shell">#这样删除的话，本地和版本库中的a.cpp都删除了git rm a.cpp#这样可以从版本库中删除，但是本地是不删除的git rm -cached a.cpp</code></pre><h4 id="更改文件的名字"><a href="#更改文件的名字" class="headerlink" title="更改文件的名字"></a>更改文件的名字</h4><pre><code class="shell">#讲xxx.cpp改成aaa.cppgit mv xxx.cpp aaa.cpp</code></pre><h4 id="Git的流水线操作"><a href="#Git的流水线操作" class="headerlink" title="Git的流水线操作"></a>Git的流水线操作</h4><pre><code class="shell">#先创建一个文件touch a.cpp#将这个文件放到小推车里git add a.cpp#也可以全部添加进去git add .##将文件送到仓库git commit -m &quot;这里写一下提交情况&quot;</code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre><code class="shell">#查看所有的日志信息git log#查看最近一(或者n次)次的信息git log -1（n）#查看更加详细的信息git log -p#查看更加简短的信息git log -oneline#查看文件发生的变化git log --name-only#查看文件变化更多的信息（添加删除之类的）git log --name-status </code></pre><h4 id="修改提交的描述"><a href="#修改提交的描述" class="headerlink" title="修改提交的描述"></a>修改提交的描述</h4><pre><code class="shell">#调用vim对提交信息进行修改git commit --amend</code></pre><h3 id="3-Git的分支使用"><a href="#3-Git的分支使用" class="headerlink" title="3.Git的分支使用"></a>3.Git的分支使用</h3><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code class="shell">#查看分支(绿色标志是当前分支)git branch#查看分支（包含远程分支:橘黄色）git branch -a#创建qu分支git branch qu#切换到qu分支git checkout qu#创建并切换分支qugit checkout -b qu#分支的合并（将qu分支合并到当前的分支中）git merge qu</code></pre><p><strong><code>touch demo.cpp</code>后，在qu分支commit后，切换到master分支再ls是没有的。</strong></p><p>当然，有时候需要删除。删除不能盲目删除，需要看看有没有被merge。</p><pre><code class="shell">#查看已经merge的分支git branch --merge#查看没有merge的分支git branch --no--merge#删除分支qu(d-delete)git branch -d qu#强制删除分支qu（qu可能没有合并之类的）git branch -d qu</code></pre><h4 id="分支之冲突"><a href="#分支之冲突" class="headerlink" title="分支之冲突"></a>分支之冲突</h4><p>两个分支merge到了master分支的时候，如果有冲突，需要在master分支中手动修改</p><h4 id="分支之暂存"><a href="#分支之暂存" class="headerlink" title="分支之暂存"></a>分支之暂存</h4><p>场景：我在ask分支开发，但是bbs分支出现了毛病，我需要到bbs分支修改，但是ask分支的内容没有写完，提交不太好。但是不提交还不能切换分支。</p><p>这时候就应该用到暂存功能</p><pre><code class="shell">#暂存git stash#查看所有的暂存git stash list#恢复暂存git stash apply#恢复了，吧暂存区的内容删除（删除stash@{0}，名字在list中可以查看）git stash drop stash@{0}#使用pop就可以恢复+删除git stash pop</code></pre><p><strong>新建的文件不会提交的暂存区，只有add后或者修改的文件才可以提交的暂存区</strong></p><h3 id="4-Git的进阶使用"><a href="#4-Git的进阶使用" class="headerlink" title="4.Git的进阶使用"></a>4.Git的进阶使用</h3><h4 id="删除暂存中已经添加的文件-从版本库中恢复"><a href="#删除暂存中已经添加的文件-从版本库中恢复" class="headerlink" title="删除暂存中已经添加的文件/从版本库中恢复"></a>删除暂存中已经添加的文件/从版本库中恢复</h4><pre><code class="shell">#从暂存区中删除（第一次放入暂存区）git rm --cached a.cpp#撤销在暂存中的文件（第二次或者以后的删除）git reset HEAD a.cpp#将本地文件恢复到版本库中的版本git checkout -- a.cpp</code></pre><h4 id="给Git命令起个别名"><a href="#给Git命令起个别名" class="headerlink" title="给Git命令起个别名"></a>给Git命令起个别名</h4><pre><code class="shell">#给commit起了一个c的别名git config --global alias.c commit</code></pre><p><strong>起的别名都可以在gitconfig配置文件中看到</strong></p><p>可以看出，Git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 <code>!</code> 符号，如：</p><pre><code class="shell">git config --global alias.hexonet &#39;!hexo g &amp;&amp; hexo d&#39;</code></pre><h4 id="Tag标签"><a href="#Tag标签" class="headerlink" title="Tag标签"></a>Tag标签</h4><pre><code class="shell">#查看所有的标签git tag#打标签（v1.0版本）git tag v1.0</code></pre><h4 id="生成ZIP压缩包"><a href="#生成ZIP压缩包" class="headerlink" title="生成ZIP压缩包"></a>生成ZIP压缩包</h4><pre><code class="shell">git archive master --prefix=&#39;demo/&#39; --forma=zip &gt;demo.zip</code></pre><h3 id="5-Github的使用"><a href="#5-Github的使用" class="headerlink" title="5.Github的使用"></a>5.Github的使用</h3><h4 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h4><pre><code class="shell">#生成ssh keyssh-keygen -t rsa -C &quot;qujihan@163.com&quot;#查看公钥cat ~/.ssh/id_rsa.pub</code></pre><p><code>.pub</code> 文件是公钥，另一个则是私钥，将文件复制到github/gitee的ssh配置里面就可以了，如果重新生成了Key，可能连接不上，这时候需要删除git家目录下的known_hosts文件里的内    容（known_hosts与id_rsa.pub在同一个目录下）</p><h4 id="本地与远程关联"><a href="#本地与远程关联" class="headerlink" title="本地与远程关联"></a>本地与远程关联</h4><pre><code class="shell">#将本地文件与服务器的仓库进行关联git remote add origin https://github.com/Qujihan/gitStudy.git#将文件推送到master分支git push -u origin master#将本地的分支qu与远程进行创建git push --set-upstream origin qu</code></pre><h4 id="将远程分支下载到本地分支"><a href="#将远程分支下载到本地分支" class="headerlink" title="将远程分支下载到本地分支"></a>将远程分支下载到本地分支</h4><pre><code class="shell">#将远程的qu分支下载到本地的han分支git pull origin qu:han</code></pre><h4 id="将远程分支删除"><a href="#将远程分支删除" class="headerlink" title="将远程分支删除"></a>将远程分支删除</h4><pre><code class="shell">#删除远程分支qugit push origin --delete qu</code></pre><h3 id="6-日常中Git出现的问题以及解决方案"><a href="#6-日常中Git出现的问题以及解决方案" class="headerlink" title="6.日常中Git出现的问题以及解决方案"></a>6.日常中Git出现的问题以及解决方案</h3><ol><li>warning: LF will be replaced by CRLF in<ul><li>出现原因：windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示</li><li>解决方法：git config –global core.autocrlf false</li></ul></li></ol><h4 id="7-Github中如何搜索开源项目"><a href="#7-Github中如何搜索开源项目" class="headerlink" title="7.Github中如何搜索开源项目"></a>7.Github中如何搜索开源项目</h4><p>在GitHub中，每一个项目都是由项目名(name)、描述(description)、源码与README.md组成，所以搜索的时候要按照这四部分搜索。当然还有一些限制因素，比如语言、时间、星星数量、Fork等因素</p><ul><li>in:name xxx // 按照项目名搜索</li><li>in:readme xxx // 按照README搜索</li><li>in:description xxx // 按照description搜索</li><li>stars:&gt;xxx // stars数大于xxx</li><li>forks:&gt;3000 // forks数大于xxx</li><li>language:xxx // 编程语言是xxx</li><li>pushed:&gt;YYYY-MM-DD // 最后更新时间大于YYYY-MM-DD</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记—汇编语言02-寄存器</title>
    <link href="/assembly-language02/"/>
    <url>/assembly-language02/</url>
    
    <content type="html"><![CDATA[<p>汇编笔记01_物理地址与寄存器</p><a id="more"></a><p><strong>研究的CPU：8086CPU</strong>（16位结构的CPU）（共有14个寄存器）</p><p>特点：</p><ol><li>运算器一次最多处理16位的数据</li><li>寄存器最大的宽度位16位</li><li>寄存器与运算器的通路位16位</li></ol><p>分类：</p><ul><li>一般性寄存器：AX 累加寄存器、BX 基址寄存器、CX计数寄存器、DX数据寄存器</li><li>段寄存器：ES 附加段寄存器、CS 代码段寄存器、SS 堆栈段寄存器、DS 数据段寄存器</li><li>偏移地址寄存器：SP 栈指针寄存器、BP 基址指针寄存器、SI 源变址寄存器、DI 目的变址寄存器、IP</li></ul><p>编程习惯：</p><ul><li>段寄存器<ul><li>DS寄存器：数据从哪里来</li><li>ES寄存器：数据到哪里去</li></ul></li><li>一般寄存器<ul><li>AX：一般数据</li><li>BX：段偏移地址，配合DS使用</li><li>CX：循环次数</li><li>DX：临时数据</li></ul></li></ul><h3 id="一、物理地址与内存"><a href="#一、物理地址与内存" class="headerlink" title="一、物理地址与内存"></a>一、物理地址与内存</h3><p>图中地址格式：    段地址寄存器：偏移地址寄存器</p><p>引入原因：8086CPU给了20根地址线，为了在内部使用两个16位地址合成的方法来形成一个20位地址</p><p>解决方法：<strong>地址加法器</strong></p><p>​    段地址 × 16（10H） + 偏移地址 = 物理地址（×16相当于在16进制下右移一个单位）</p><p>​    基础地址 + 偏移地址 = 物理地址</p><p>例题：0:20B的内存地址是多少，还能改写成什么</p><p>​    段地址：0000H，偏移地址：020BH</p><p>​    实际地址=0000H*16 + 020B = 00000H + 020BH = 0020BH</p><p>​    <strong>所以实际地址为：0020BH</strong></p><p>​    而0020BH =  00200H + BH = 0020H *16 + BH</p><p>​    <strong>所以还可以写成 段地址：0020H，偏移地址：BH</strong></p><h3 id="二、一般性寄存器"><a href="#二、一般性寄存器" class="headerlink" title="二、一般性寄存器"></a>二、一般性寄存器</h3><p>AX可以分为AH与AL这两个<strong>独立</strong>的8位寄存器        ===&gt;H：high    L：low ，</p><p>BX、CX、DX与AX相同</p><h3 id="三、CS与IP寄存器（代码段）"><a href="#三、CS与IP寄存器（代码段）" class="headerlink" title="三、CS与IP寄存器（代码段）"></a>三、CS与IP寄存器（代码段）</h3><p><strong>问题</strong>：可以看出，同样的内存区域，却是不相同的。实际上，在内存中，指令与数据是没有区别的，都是二进制信息，那么CPU如何区分数据与命令？</p><p><strong>回答</strong>：CPU只有当工作的时候，才将CS:IP指向的内存单元当作指令。</p><h4 id="指令执行的过程"><a href="#指令执行的过程" class="headerlink" title="指令执行的过程"></a>指令执行的过程</h4><ol><li>CPU从CS:IP所指向的内存单元中读取指令，存放到指令缓存器中</li><li>IP = IP + 所读指令的长度，从而指向下一条指令</li><li>执行指令缓存器的内容，回到步骤1</li></ol><h4 id="修改CS-IP的方法—JMP指令"><a href="#修改CS-IP的方法—JMP指令" class="headerlink" title="修改CS:IP的方法—JMP指令"></a>修改CS:IP的方法—JMP指令</h4><p>JMP的使用方法：①jmp 偏移地址 ②jmp 段地址:偏移地址</p><p>例如：</p><ul><li><code>jmp ax</code> 类似于 <code>mov ip,ax</code></li><li><code>jmp 3:01B6</code> 类似于 <code>mov cs,3   mov ip,01B6</code></li></ul><h3 id="四、SS与SP寄存器（堆栈段）"><a href="#四、SS与SP寄存器（堆栈段）" class="headerlink" title="四、SS与SP寄存器（堆栈段）"></a>四、SS与SP寄存器（堆栈段）</h3><p>堆栈的操作：push（出栈）与pop（入栈）</p><p>在内存中，内容是从<strong>高地址到低地址</strong>的：1000FH(栈底) ======&gt; 10000H(栈顶)，其中SS:SP指向栈顶元素</p><p><strong>例题1</strong>.10000H~1000FH当作栈，那么SS与SP值为多少？</p><p>SS = 1000H SP = 10H</p><p><strong>例题2</strong>.10000H~1FFFFH当作栈，栈为空，SS=1000H，则SP为多少？</p><p>当只有一个元素的时候，SS = 1000H SP = FFFEH，那么此时出栈，那么SP = SP + 2，那么SP = 0H</p><p><strong>例题3</strong>.栈段最大可以设置为多少？</p><p>因为SP寄存器的变化范围：0~FFFFH（0 ~ 65535）也就是说，可以存放32768个字型数据（64KB）</p><p>其中：SS = 2000H，SP = 0 即可存放32768个字型数据 </p><h3 id="五、DS寄存器与-address-（数据段）"><a href="#五、DS寄存器与-address-（数据段）" class="headerlink" title="五、DS寄存器与[address]（数据段）"></a>五、DS寄存器与[address]（数据段）</h3><p>数据段是编程的时候的数据安排，对于数据而言：</p><p>高地址内存单元存放<strong>字形数据</strong>的高位字节</p><p>低地址内存单元存放<strong>字形数据</strong>的低位字节</p><p><u>这里容易搞错，因为显示的时候，低位在显示的前面，会让人以为是高位</u>！</p><p>以00000000 01111011为例：在字节型数据中为<code>01</code>，而在字型数据中为<code>0100</code></p><pre><code class="assembly">┌─────────────┬─────────────┐│00000000高地址│01111011低地址│└─────────────┴─────────────┘ │ ……………… │←……       │             │        ├────────┤       │             └───────→│01111011│←666号地址，内存地址低       │                      ├────────┤       └─────────────────────→│00000000│←667号地址，内存地址高                              ├────────┤                              │ ……………… │←……//其中，666号地址是指定存储地址</code></pre><p><strong>所以使用mov、sub、add的时候应该格外注意！</strong></p><p>DS：存放访问数据的段地址</p><p>[X]：X为偏移地址，一般为BX寄存器</p><pre><code class="assembly">mov bx,1000Hmov ds,bxmov al,[0]</code></pre><p>另外，在汇编语言中[X]与(X)的意思是截然不同的：</p><ul><li>[X]：表示一个内存单元的时候<ul><li>段地址在DS中，偏移地址在X中</li></ul></li><li>(X)：表示内存单元X的内容</li></ul><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>对于数据段，段地址放在DS中，使用mov、add、sub等指令访问内存单元</p><p>对于代码段，段地址放在CS中，段中第一条指令的偏移地址放在了IP中</p><p>对于堆栈段，段地址放在SS中，栈顶单元的偏移地址放在了SP中，使用pop、push来访问栈空间</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记—汇编语言01-安装DOSBox</title>
    <link href="/assembly-language01/"/>
    <url>/assembly-language01/</url>
    
    <content type="html"><![CDATA[<p>汇编笔记00_DOSBox的安装与常用命令</p><a id="more"></a><h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><p>​    <strong>Windows 10  1909 pro亲测可用，其他windows版本应该也可以</strong></p><ul><li>DOSBox <a href="https://sourceforge.net/projects/dosbox/files/latest/download" target="_blank" rel="noopener">下载</a></li><li>debug.exe、MASM.exe、LINK.exe <a href="dosbox.zip">下载</a></li></ul><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><ol><li><p>DOSBox安装略    </p></li><li><p>在任意地址新建文件夹（这里选择D:/Code/asm为例）,并将debug.exe放进去</p></li><li><p>打开DOSBox，输入（<strong>注意是反斜杠</strong>）</p></li></ol><pre><code class="shell">#第一次输入mount c: d:\Code\asm#第二次输入c:</code></pre><ol start="4"><li>第3步也可以这样做：打开DOSBox，看到这个地址，然后代开，在最后面加上 mount c: d:/Code/asm</li></ol><p><img src="doxbox.png" srcset="/img/loading.gif" alt="dosbox"><br><img src="conf.png" srcset="/img/loading.gif" alt="conf"></p><ol start="5"><li>敲debug就可以运行了！（-u中，u是我自己输入的！）<br><img src="debug.png" srcset="/img/loading.gif" alt="debug"></li></ol><h3 id="三、debug调试工具"><a href="#三、debug调试工具" class="headerlink" title="三、debug调试工具"></a>三、debug调试工具</h3><ul><li>r指令：查看和改变寄存器的内容</li><li>d指令：查看内存中的内容（查看128字节）</li><li>u指令：可以将内存中的机器指令翻译成汇编指令</li><li>a指令：可以以汇编指令的格式在内存中写入一条汇编指令</li><li>t指令：执行当前CS:IP所指向的机器指令</li><li>e指令：可以改写内存中的内容</li><li>p指令：执行完loop</li><li>g指令：g 偏移地址 ： 可以跳转到想要执行的命令</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录手册—Hexo搭建博客以及日常维护</title>
    <link href="/hexo/"/>
    <url>/hexo/</url>
    
    <content type="html"><![CDATA[<p>关于我Hexo的搭建的一些记录，如有疑问，欢迎留言或者发送邮件到<a href="mailto:qujihan@163.com">qujihan@163.com</a></p><a id="more"></a><h3 id="零、准备工具（Windows）"><a href="#零、准备工具（Windows）" class="headerlink" title="零、准备工具（Windows）"></a>零、准备工具（Windows）</h3><h4 id="本文行文顺序"><a href="#本文行文顺序" class="headerlink" title="本文行文顺序"></a>本文行文顺序</h4><ol><li>先在本地设置好基本配置，可以通过 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 预览</li><li>在Github设置好，开启Pages服务</li><li>（可选项）绑定域名</li><li>一些问题</li><li>日常维护</li></ol><h4 id="准备安装的软件与账号等"><a href="#准备安装的软件与账号等" class="headerlink" title="准备安装的软件与账号等"></a>准备安装的软件与账号等</h4><ol><li>Git</li><li>Node.js</li><li>Github等支持<strong>Pages</strong>服务的代码托管商账号</li><li>安装Hexo：在git bash中输入：<code>npm install hexo-cli -g</code></li><li>（可选项）一个自己喜欢的Hexo主题—&gt;<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题界面</a></li><li>（可选项）购买一个域名</li></ol><h4 id="需要安装插件"><a href="#需要安装插件" class="headerlink" title="需要安装插件"></a>需要安装插件</h4><ul><li><p>hexo-deployer-git插件：</p><ul><li><p>作用：将生成的public文件夹下的东西部署到Github</p></li><li><p>安装命令：在git bash中输入：<code>npm install hexo-deployer-git --save</code></p></li><li><p>将Hexo根目录的_config.yml中的deploy选项依照自己的需求更改。</p><pre><code class="yml">deploy:  type: git  repo: git@github.com:Qujihan/qujihan.github.io.git #git仓库  branch: master #git仓库的分支</code></pre></li></ul></li></ul><h3 id="一、发布到Github"><a href="#一、发布到Github" class="headerlink" title="一、发布到Github"></a>一、发布到Github</h3><ol><li><p>将hexo主目录与主题目录下的.git文件删除（如果有的话）（windows记得开启查看隐藏项目）</p></li><li><p>在Github中创建名为username.github.io的仓库，并复制其SSH地址</p></li><li><p>更改Hexo根目录的_config.yml中的deploy选项   <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">详见项目主页（点这里）</a></p><p> 以下是我的，可以参考</p><pre><code class="yml"> deploy:   type: git   repo: git@github.com:Qujihan/qujihan.github.io.git #git仓库   branch: master #git仓库的分支</code></pre></li><li><p>打开git，执行<code>hexo g -d</code></p></li><li><p>打开网站地址（ 例如：<a href="https://qujihan.github.io" target="_blank" rel="noopener">https://qujihan.github.io</a> ）就可以看到了</p></li></ol><p align="center">-----------------下面是将源码备份到Github中，可跳过-----------------</p>1. 在hexo主目录下打开git bash并执行`git init`<ol start="2"><li><p>在hexo文件夹右键打开git bash，执行<code>git checkout -b hexosrc</code></p></li><li><p>打开git，执行<code>git remote add origin 刚才复制的地址</code></p></li><li><p>依次执行<code>git add .</code>、<code>git commit -m &quot;backup hexosrc&quot;</code>、<code>git push -u origin hexosrc</code></p></li><li><p>打开GitHub查看有没有hexosrc分支</p></li><li><p>（可选）设置别名</p><ol><li><p>打开git bash，分别输入：</p><pre><code class="shell">git config --global alias.backup &#39;!git add .&amp;&amp;git commit -m &quot;backup hexosrc&quot;&amp;&amp;git push&#39;git config --global alias.hexonet &#39;!hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#39;git config --global alias.hexolocal &#39;!hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39;git config --global alias.hexoall &#39;!hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo s&#39;</code></pre></li><li><p>以后就可以使用以下操作了：</p><ul><li>备份Hexo源码到hexosrc分支命令：git backup</li><li>渲染好网页并本地预览命令：git hexonet</li><li>渲染好网页并部署到Github Page命令：git hexolocal</li><li>渲染本地预览部署三部曲命令：git hexoall</li></ul></li></ol></li></ol><h3 id="二、绑定域名（没有买域名可以忽略）"><a href="#二、绑定域名（没有买域名可以忽略）" class="headerlink" title="二、绑定域名（没有买域名可以忽略）"></a>二、绑定域名（没有买域名可以忽略）</h3><ol><li>在域名解析界面解析自己的域名（我是在腾讯云买的域名，这里以腾讯云为例）</li><li>在博客项目主页打开setting页面，在下面找到Custom domain选项，填上自己的域名</li><li>在hexo的source目录下新建一个不带有后缀的CNAME文件，使用记事本打开，将自己的域名写入</li></ol><h3 id="三、我的一些问题以及解决方案"><a href="#三、我的一些问题以及解决方案" class="headerlink" title="三、我的一些问题以及解决方案"></a>三、我的一些问题以及解决方案</h3><ol><li><p>文章怎么插入图片？</p><p>将Hexo根目录的_config.yml中的post_asset_folder改成true</p></li></ol><h3 id="四、日常维护"><a href="#四、日常维护" class="headerlink" title="四、日常维护"></a>四、日常维护</h3><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><h5 id="1、写文章"><a href="#1、写文章" class="headerlink" title="1、写文章"></a>1、写文章</h5><h5 id="2、编辑成Hexo识别的样子"><a href="#2、编辑成Hexo识别的样子" class="headerlink" title="2、编辑成Hexo识别的样子"></a>2、编辑成Hexo识别的样子</h5><ul><li><p>在Hexo目录打开git bash输入<code>hexo new “文章名”</code></p></li><li><p>设置Front-matter</p><ul><li>设置不同的标签：<code>tags: [git,note]</code></li><li>设置分类：<code>categories:  - A  - B</code>(这是两级分类，B是A的子类)</li><li>设置永久链接：<code>permalink: VSCode-Cpp</code></li><li>文章首页缩略图：<code>index_img: /img/example.jpg</code></li><li>文章顶部大图：<code>banner_img: /img/example.jpg</code></li></ul></li><li><p>设置摘要：<code>&lt;!-- more --&gt;</code></p></li></ul><h4 id="换电脑了怎么恢复"><a href="#换电脑了怎么恢复" class="headerlink" title="换电脑了怎么恢复"></a>换电脑了怎么恢复</h4><ol><li>打开Git执行<code>git clone -b hexosrc xxxxxxxx(SSH地址/Http地址)</code>，得到一个名为xxxxxx.github.io的文件夹</li><li>随便创建一个文件夹（例如：hexo文件夹），打开文件夹并右键打卡git bash执行<code>hexo init</code></li><li>按照文章前面的样子安装需要的插件</li><li>将hexo文件夹里的node_modules，全部复制到名为xxxxxx.github.io的文件夹</li><li>Over！（如果换电脑了，别忘了把起别名的那一步再来一遍）</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>环境搭建—VSCode搭建C++与CMake环境</title>
    <link href="/vscode-cpp/"/>
    <url>/vscode-cpp/</url>
    
    <content type="html"><![CDATA[<p>这篇文章写在VSCode在Window下，如何搭建环境写C/C++程序的</p><a id="more"></a><p>VSCode的超高颜值吸引了一大批用户来使用VSCode，相比于VC6.0、Dev-C++等软件的上世纪界面，VSCode简直是降维打击。当然，轻便VSCode的优点，Visual Studio太大，CLion太重，VSCode这股清流便吸引了我们的眼光</p><p>这篇文章将如何在VSCode中配置C/C++环境，如果你刚开始学习C/C++（还没学习多文件编译等），平时只是写写算法题，那么你只看前面不涉及CMake的内容就可以了（前面带有CMake的就可以跳过）。否则你就要全看啦！</p><h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><ol><li>Visual Studio Code的下载：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">点击这里：官网下载</a><ol><li><strong>安装的时候别忘了把open with code勾选上！！</strong></li><li>如果不是中文的话，可以安装插件Chinese(Simplified) Language</li><li>安装插件C/C++</li><li>安装插件C++ Intellisense</li><li>（CMake）安装插件CMake</li><li>（CMake）安装插件CMake Tools</li></ol></li><li>MinGW-w64的下载：<a href="https://sourceforge.net/projects/mingw-w64/files/" target="_blank" rel="noopener">点击这里：sourceforge下载</a><ol><li>点击Download Latest Version（<strong>安装到没有空格、非ASCII码的目录地址下！</strong><del>默认地址不可以</del>）</li><li>在setting界面中，Architecture选择x86_64</li><li>安装后将安装目录中的bin文件夹添加到<strong>用户变量</strong>里</li><li>在cmd中输入<code>gcc -v</code>，显示版本信息即安装成功，不显示可以重启试试</li></ol></li><li>（CMake）CMake的下载：<a href="https://cmake.org/download/" target="_blank" rel="noopener">点击这里：官网下载</a><ol><li>选择cmake-(这里是版本号)-rc1-win64-x64.msi（Linux与Mac选适合自己系统的）</li><li>在cmd中输入<code>cmake --version</code>，显示版本信息即安装成功，不显示可以重启试试</li></ol></li></ol><h3 id="二、C-C-单文件-参考链接"><a href="#二、C-C-单文件-参考链接" class="headerlink" title="二、C/C++单文件   参考链接"></a>二、C/C++单文件   <a href="https://code.visualstudio.com/docs/cpp/config-mingw" target="_blank" rel="noopener">参考链接</a></h3><h4 id="1、创建工程目录"><a href="#1、创建工程目录" class="headerlink" title="1、创建工程目录"></a>1、创建工程目录</h4><p>​    在目录没有空格与非ASCII码的地方新建一个文件夹，并在VSCode中打开这个文件夹</p><h4 id="2、配置c-cpp-properties-json文件"><a href="#2、配置c-cpp-properties-json文件" class="headerlink" title="2、配置c_cpp_properties.json文件"></a>2、配置c_cpp_properties.json文件</h4><ol><li><p>在VSCode中按Ctrl+Shift+P，输入Edit configurations(UI)</p></li><li><p>看一下编译器路径有没有自动填充上，没有的话关闭VSCode再打开，如果还不行，就检查MinGW-w64是否安装成功</p></li><li><p>更改</p><ul><li>intelliSenseMode模式改为 ${default}</li></ul></li></ol><h4 id="3、配置tasks-json与launch-json文件"><a href="#3、配置tasks-json与launch-json文件" class="headerlink" title="3、配置tasks.json与launch.json文件"></a>3、配置tasks.json与launch.json文件</h4><ol><li><p>在目录下新建demo.cpp文件📃</p><pre><code class="c++">#include &lt;iostream&gt;int main(){    printf(&quot;hello world&quot;);}</code></pre></li><li><p>写完以后按F5—&gt;C++(GDB/LLDB)—&gt;g++.exe……—&gt;(出错了)取消</p><p><img src="%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94VSCode%E6%90%AD%E5%BB%BAC++%E4%B8%8ECMake%E7%8E%AF%E5%A2%83/launch_tasks.gif" srcset="/img/loading.gif" alt="launch_tasks"></p></li><li><p>如果想使用那种黑框框cmd，而不是使用VSCode集成的命令行，可以将launch.json中的externalConsole选项改为true</p></li><li><p>现在就可以用了！可以在行号打断点，按F5 debug，不打断点就是直接执行（第四部分会说一下会遇到的问题，不要跳过）</p></li></ol><h3 id="三、（CMake）多文件"><a href="#三、（CMake）多文件" class="headerlink" title="三、（CMake）多文件"></a>三、（CMake）多文件</h3><ol><li><p>在VSCode中按Ctrl+Shift+P，输入CMake:Scan for Kits</p></li><li><p>在VSCode中按Ctrl+Shift+P，输入CMake:Config</p></li><li><p>在右下角点击快速启动新的CMake项目</p></li><li><p>输入新的项目名称</p></li><li><p>选择 Executable 创建可执行文件，等一会</p></li><li><p>在出现的一个main.cpp文件中执行上面动图的那些操作</p></li><li><p>下面进行修改与删除</p><ol><li>删除tasks.json文件</li><li>删除launch.json中的<code>&quot;preLaunchTask&quot;: &quot;g++.exe build active file&quot;</code>这一行</li><li>修改<code>&quot;program&quot;: &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;,</code>为<code>&quot;program&quot;: &quot;${command:cmake.launchTargetPath}&quot;,</code></li></ol></li><li><p>在建立与build平级的文件夹📁inc与📂src</p></li><li><p>将CMakeLists.txt的内容修改为</p><pre><code class="txt"># 最低CMake版本要求cmake_minimum_required(VERSION 3.10.0)# 项目名称project(cmake-project-name)# 设置C/C++标准set(CMAKE_C_STANDARD 11)set(CMAKE_CXX_STANDARD 17)set(CMAKE_CXX_STANDARD_REQUIRED ON)# 头文件路径include_directories(&quot;inc&quot;)# 枚举头文件file(GLOB_RECURSE INCLUDES &quot;inc/*.h&quot; &quot;inc/*.hpp&quot;)# 枚举源文件aux_source_directory(&quot;src&quot; SOURCES)# 输出路径set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})# 生成可执行的文件add_executable(${PROJECT_NAME} ${SOURCES} ${INCLUDES})</code></pre></li><li><p>以后将头文件写在inc文件夹中，将.cpp/.c/.c文件写在src文件中，每次新添加了文件都要重新生成</p><p><img src="%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%94VSCode%E6%90%AD%E5%BB%BAC++%E4%B8%8ECMake%E7%8E%AF%E5%A2%83/cmake.png" srcset="/img/loading.gif" alt="cmake"></p></li><li><p>Debug等与上面的相同</p></li></ol><h3 id="四、疑难杂症"><a href="#四、疑难杂症" class="headerlink" title="四、疑难杂症"></a>四、疑难杂症</h3><ol><li>使用cmd输出中文乱码问题<ol><li>问题原因：<br>VSCode是UTF8编码，而cmd与powershell是GBK编码</li><li>解决方法①：打开控制面板—&gt;时钟与区域—&gt;更改日期、时间……—&gt;管理（选项卡）—&gt;更改系统区域设置—&gt;Beta版：使用……        最后重启即可</li><li>解决方法②：在tasks.json的args中添加<code>&quot;-fexec-charset=GB18030&quot;,</code>更改exe文件的编码</li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>环境搭建—V2ray科学上网</title>
    <link href="/v2ray/"/>
    <url>/v2ray/</url>
    
    <content type="html"><![CDATA[<p>下文皆为本人实验性操作，如参考请自行负法律责任</p><a id="more"></a><h2 id="零、情况简述"><a href="#零、情况简述" class="headerlink" title="零、情况简述"></a>零、情况简述</h2><ul><li>VPS：Vlutr—日本—$5/M—CentOS7 <a href="https://my.vultr.com/" target="_blank" rel="noopener">链接</a></li><li>Xshell 6 <a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">下载</a></li><li>v2rayN  <a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">下载（选V2ray-core）</a></li></ul><h2 id="一、开启BBR"><a href="#一、开启BBR" class="headerlink" title="一、开启BBR"></a>一、开启BBR</h2><p><strong>（更新内核—&gt;开启BBR）</strong></p><h3 id="①更新内核"><a href="#①更新内核" class="headerlink" title="①更新内核"></a>①更新内核</h3><ol><li><p>查看系统现在的内核</p><ul><li><pre><code class="shell">  uname -r</code></pre><p>  <img src="1.01.png" srcset="/img/loading.gif" alt="查看系统内核"></p></li></ul></li></ol><ol start="2"><li><p>启用 ELRepo 仓库</p><ul><li><pre><code class="shell">  sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org  sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</code></pre><p>  <img src="1.02.png" srcset="/img/loading.gif" alt="启用 ELRepo 仓库"></p></li></ul></li></ol><ol start="3"><li><p>列出可用的系统内核相关包</p><ul><li><pre><code class="shell">  yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available</code></pre><p>  <img src="1.03.png" srcset="/img/loading.gif" alt="可用的系统内核相关包"></p></li></ul></li></ol><ol start="4"><li><p>安装最新的主线稳定内核（时间挺长的）</p><ul><li><pre><code class="shell">  yum --enablerepo=elrepo-kernel install kernel-ml</code></pre><p>  <img src="1.04.png" srcset="/img/loading.gif" alt="安装最新的主线稳定内核"></p></li></ul></li></ol><ol start="5"><li><p>查看系统的所有内核</p><ul><li><pre><code class="shell">  sudo egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \&#39;</code></pre><p>  <img src="1.05.png" srcset="/img/loading.gif" alt="查看系统的所有内核"></p></li></ul></li></ol><ol start="6"><li><p>设置 GRUB 默认的内核版本</p><ul><li><pre><code class="shell">  sudo grub2-set-default X</code></pre></li><li><p><strong>第一个的索引值是0，这里我们选择最新的5.4.3。所以X应该为1</strong></p></li></ul></li></ol><ol start="7"><li><p>重启 <code>sudo shutdown -r now</code></p></li><li><p>查看是否切换了，方法同1</p></li><li><p>删除其他内核</p><ul><li><pre><code class="shell">  rpm -qa | grep kernel  yum remove xxx xxx xxx xxx</code></pre><p>  <img src="1.09.png" srcset="/img/loading.gif" alt="删除其他内核"></p></li></ul></li></ol><h3 id="②开启BBR"><a href="#②开启BBR" class="headerlink" title="②开启BBR"></a>②开启BBR</h3><ol><li><p>修改sysctl配置</p><ul><li><pre><code class="shell">  echo &#39;net.core.default_qdisc=fq&#39; | sudo tee -a /etc/sysctl.conf  echo &#39;net.ipv4.tcp_congestion_control=bbr&#39; | sudo tee -a /etc/sysctl.conf  sudo sysctl -p</code></pre><p>  <img src="2.01.png" srcset="/img/loading.gif" alt="修改并开启"></p></li></ul></li></ol><ol start="2"><li><p>确保BBR已经开启</p><ul><li><pre><code class="shell">  sudo sysctl net.ipv4.tcp_available_congestion_control  sudo sysctl -n net.ipv4.tcp_congestion_control  lsmod | grep bbr</code></pre></li><li><div><img src="2.02.png" srcset="/img/loading.gif"></div></li></ul></li></ol><h2 id="二、安装V2ray"><a href="#二、安装V2ray" class="headerlink" title="二、安装V2ray"></a>二、安装V2ray</h2><ol><li><p>官方自动安装脚本</p><ul><li><pre><code class="shell">  bash &lt;(curl -L -s https://install.direct/go.sh)  #开启服务  systemctl start v2ray</code></pre></li></ul></li><li><p>关闭防火墙并禁止开启启动</p><ul><li><pre><code class="shell">  #查看所有的打开的窗口  firewall-cmd --zone=public --list-ports  #端口放行（xxxxx是安装成功后显示的端口号port）  firewall-cmd --zone=public --add-port=xxxxx/tcp --permanent  #重启防火墙  firewall-cmd --reload  #停止firewall（不用执行）  systemctl stop firewalld  #禁止firewall开机启动（不用执行）  systemctl disable firewalld</code></pre></li></ul></li></ol><h2 id="三、科学上网"><a href="#三、科学上网" class="headerlink" title="三、科学上网"></a>三、科学上网</h2><ol><li><p>打开V2rayN，选择服务器—&gt;添加[VMess]服务器</p></li><li><p>按照你自己的情况填写</p><ul><li>地址：VPS分配的IP</li><li>端口：在VPS安装后会给你</li><li>用户ID：在VPS安装后会给你</li><li>额外ID：默认64</li><li>别名：随便，相当于备注</li></ul></li><li><p><strong>如果以上信息忘了，可以执行</strong><code>cat /etc/v2ray/config.json</code><strong>查看</strong>（IP查看不了）</p><p> <img src="3.01.png" srcset="/img/loading.gif" alt="开启V2ray服务"></p></li></ol><h2 id="四、一些常用的命令"><a href="#四、一些常用的命令" class="headerlink" title="四、一些常用的命令"></a>四、一些常用的命令</h2><ol><li>查看V2ray的状态：<code>sudo systemctl status v2ray</code></li><li>启用V2ray：<code>sudo systemctl enable v2ray</code></li><li>禁用V2ray：<code>sudo systemctl disable v2ray</code></li><li>启动V2ray：<code>sudo systemctl start v2ray</code></li><li>停止V2ray：<code>sudo systemctl stop v2ray</code></li><li>重启V2ray：<code>sudo systemctl restart v2ray</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>环境搭建—JDK11与Tomcat9</title>
    <link href="/jdk-tomcat/"/>
    <url>/jdk-tomcat/</url>
    
    <content type="html"><![CDATA[<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><ul><li>JDK、Tomcat</li><li>下载地址详见 <a href="www.qujihan.com/software">我的博客</a>，找当相应的软件点击后面的立即下载</li></ul><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>​    因为JDK11后，就没有JRE，所以有些许不一样</p><p>​    这里默认JDK放在了<code>D:\Other\Application\jdk-11.0.5</code></p><p>​    Tomcat放在了<code>D:\Other\Application\apache-tomcat-9.0.30</code></p><ol><li><p>在系统变量里添加JAVA_HOME：D:\Other\Application\jdk-11.0.5</p></li><li><p>在系统变量里添加CATALINA_HOME：D:\Other\Application\apache-tomcat-9.0.30</p></li><li><p>在系统变量里的Path新建</p><ul><li>%CATALINA_HOME%\lib</li><li>%CATALINA_HOME%\bin</li><li>%JAVA_HOME%\bin</li></ul></li><li><p>（可选）在cmd或者Powershell输入java -version看是否显示版本号，以验证java环境配置是否正确</p></li><li><p>在资源管理器打开Tomcat的安装目录下的bin文件夹</p></li><li><p>按住shift再点击鼠标右键，点击 在此处打开Powershell窗口</p></li><li><p>输入service install Tomcat9</p></li></ol><h3 id="三、运行"><a href="#三、运行" class="headerlink" title="三、运行"></a>三、运行</h3><ol><li>在 此电脑 右键—&gt;选择管理—&gt;选择左边的服务与应用服务</li><li>选择服务—&gt;找到Apache Tomcat—&gt;右键 启动（想要停止可以选择停止）</li><li>在浏览器输入<a href="http://localhost:8080/看是否可以访问" target="_blank" rel="noopener">http://localhost:8080/看是否可以访问</a></li></ol><h3 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h3><h4 id="1、端口冲突"><a href="#1、端口冲突" class="headerlink" title="1、端口冲突"></a>1、端口冲突</h4><ol><li><p>找到Toncat目录下的conf文件夹下的server.xml</p></li><li><p>Shutdown端口 Server port（默认为8005端口）</p></li><li><p>http访问端口 Connector port（默认为8080端口）</p></li><li><p>AJP协议访问端口 Connector port（默认为8009端口）</p></li></ol><h4 id="2、更改用户名"><a href="#2、更改用户名" class="headerlink" title="2、更改用户名"></a>2、更改用户名</h4><ol><li><p>找到Toncat目录下的conf文件夹下的tomcat-users</p></li><li><p>将下面的注释代码换成下面的代码，用户名与密码都是root</p></li><li><pre><code class="xml">  &lt;role rolename=&quot;root&quot;/&gt;  &lt;user username=&quot;root&quot; password=&quot;root&quot; roles=&quot;manager-gui,admin-gui&quot;/&gt;</code></pre></li></ol><h4 id="3、Tomcat在IDEA中控制台乱码"><a href="#3、Tomcat在IDEA中控制台乱码" class="headerlink" title="3、Tomcat在IDEA中控制台乱码"></a>3、Tomcat在IDEA中控制台乱码</h4><ol><li>​    在apache-tomcat-9.0.16\conf\logging.properties中将<code>java.util.logging.ConsoleHandler.encoding = UTF-8</code>注释掉</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录手册—重装软件一览表</title>
    <link href="/software/"/>
    <url>/software/</url>
    
    <content type="html"><![CDATA[<p>软件一览表，这是我自用的一些软件及其下载地址，方便重装等用途！</p><a id="more"></a><h3 id="软件一览"><a href="#软件一览" class="headerlink" title="软件一览"></a>软件一览</h3><p>​    <strong>下载地址如果没有标明，都是官方网址</strong></p><ol><li>QQ <a href="https://im.qq.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：无</li></ul></li><li>Wechat <a href="https://weixin.qq.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：无</li></ul></li><li>QQ音乐 <a href="https://y.qq.com/download/download.html" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：无</li></ul></li><li>百度网盘 <a href="https://pan.baidu.com/download" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：无</li></ul></li><li>Office <a href="https://www.office.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：无</li></ul></li><li>Steam <a href="https://store.steampowered.com/about/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：无</li></ul></li><li>ITunes <a href="https://support.apple.com/zh-cn/HT210384" target="_blank" rel="noopener">点击下载</a><ul><li>无</li></ul></li><li>Edge <a href="https://c2rsetup.officeapps.live.com/c2r/downloadEdge.aspx?ProductreleaseID=Edge&platform=Default&version=Edge&source=EdgeInsiderPage&Channel=stable&language=zh-cn" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：Chromium Edge </li></ul></li><li>7zip <a href="https://www.7-zip.org/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：小巧的压缩软件</li></ul></li><li>VSCode <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：超级强大的编辑器，我用来写C/C++ 、Python、Java、Html/CSS/JS与Latex</li><li><strong>别忘了把open with code勾选上！！</strong></li></ul></li><li>IntelliJ IDEA <a href="http://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：构建大型Java项目的时候使用</li></ul></li><li>TEXLive <a href="http://mirror.ctan.org/systems/texlive/Images/" target="_blank" rel="noopener">点击下载</a> <ul><li>介绍：tex 的套装</li></ul></li><li>Python <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">点击下载</a><ul><li>无</li></ul></li><li>JDK <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：Java Development Kit，Java开发工具包</li></ul></li><li>Node.js <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：基于 Chrome V8 引擎的 JavaScript 运行环境，我主要用于Hexo博客</li></ul></li><li>Mysql <a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：关系型数据库管理系统</li></ul></li><li>Navicat Premium 12 <a href="https://www.navicat.com.cn/download/navicat-premium" target="_blank" rel="noopener">点击下载</a> <a href="Navicat_keygen.zip">破解</a><ul><li>介绍：数据库管理工具</li></ul></li><li>Tomcat <a href="http://tomcat.apache.org/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：轻量级应用服务器</li></ul></li><li>Git <a href="https://git-scm.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：分布式版本T控制系统</li></ul></li><li>Typora <a href="https://typora.io/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：（强推）强大的Markdown编辑器！本篇文章就是用这个软件写的</li></ul></li><li>PotPlayer <a href="https://daumpotplayer.com/download/" target="_blank" rel="noopener">点击下载</a> <a href="NoButton.zip">皮肤下载</a><ul><li>介绍：强大的视频播放器，使用皮肤达到超高颜值！</li></ul></li><li>xhsell与xftp <a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：终端模拟软件/SFTP、FTP 文件传输软件</li></ul></li><li>TrafficMonitor <a href="https://github.com/zhongyang219/TrafficMonitor/releases" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：Windows下显示上传/下载速度、CPU与内存情况的一款开源的、小巧的、任务栏显示的软件</li></ul></li><li>Wgusture <a href="http://www.yingdev.com/projects/wgestures" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：自定义全局手势，提高鼠标的效率。我一般用于快速搜索、复制、置顶某些应用等操作</li></ul></li><li>Listary <a href="https://www.listary.com/download" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：用于Windows的文件名定位/搜索辅助软件</li></ul></li><li>Quicklook <a href="https://github.com/QL-Win/QuickLook" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：点击鼠标就可以实时查看内容，我一般用于临时查看.java、.cpp等文件</li></ul></li><li>Snipaste <a href="https://www.snipaste.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：超级好用的截图工具</li></ul></li><li>Everything <a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：超级强大的搜索工具</li></ul></li><li>VMware Workstation Pro <a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：强大的虚拟机</li></ul></li><li>v2rayN <a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：翻墙用</li></ul></li><li>Internet Download Manager <a href="http://www.carrotchou.blog/" target="_blank" rel="noopener">点击下载（非官方）</a><ul><li>介绍：很好用的下载软件</li></ul></li><li>GifCan <a href="http://www.bahraniapps.com/" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：生成gif图片</li></ul></li><li>Visualmaster <a href="visualmaster.zip">点击下载（由我提供）</a><ul><li>介绍：软媒魔方提取出来的单文件，仅500KB，我用来取消桌面快捷键的小箭头等操作</li></ul></li><li>RegexBuddy <a href="RegexBuddy.zip">点击下载（由我提供）</a><ul><li>介绍：正则表达式工具</li></ul></li><li>Fira Code字体 <a href="https://github.com/tonsky/FiraCode/releases" target="_blank" rel="noopener">点击下载</a><ul><li>介绍：连体字字体，方便编程</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
